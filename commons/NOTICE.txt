This software uses the following third-party libraries under the following licenses:
| iharder:2.2.1 | @author Robert Harder | Library code and tests are embedded under com.itextpdf.commons.utils.Base64 class.




------------------------------------------------------------------------------------------------------------------------


iharder:2.2.1 full license agreement text is below:

     Encodes and decodes to and from Base64 notation.
     <p>
     Homepage: <a href="http://iharder.net/base64">http://iharder.net/base64</a>.
     <br>
     Change Log:
     <br>
     <ul>
     <li>v2.2.1 - Fixed bug using URL_SAFE and ORDERED encodings. Fixed bug
     when using very small files (~&lt; 40 bytes).</li>
     <li>v2.2 - Added some helper methods for encoding/decoding directly from
     one file to the next. Also added a main() method to support command line
     encoding/decoding from one file to the next. Also added these Base64 dialects:
     <ol>
     <li>The default is RFC3548 format.</li>
     <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.URLSAFE_FORMAT) generates
     URL and file name friendly format as described in Section 4 of RFC3548.
     http://www.faqs.org/rfcs/rfc3548.html</li>
     <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.ORDERED_FORMAT) generates
     URL and file name friendly format that preserves lexical ordering as described
     in http://www.faqs.org/qa/rfcc-1940.html</li>
     </ol>
     Special thanks to Jim Kellerman at <a href="http://www.powerset.com/">http://www.powerset.com/</a>
     for contributing the new Base64 dialects.
     </li>

     <li>v2.1 - Cleaned up javadoc comments and unused variables and methods. Added
     some convenience methods for reading and writing to and from files.</li>
     <li>v2.0.2 - Now specifies UTF-8 encoding in places where the code fails on systems
     with other encodings (like EBCDIC).</li>
     <li>v2.0.1 - Fixed an error when decoding a single byte, that is, when the
     encoded data was a single byte.</li>
     <li>v2.0 - I got rid of methods that used booleans to set options.
     Now everything is more consolidated and cleaner. The code now detects
     when data that's being decoded is gzip-compressed and will decompress it
     automatically. Generally things are cleaner. You'll probably have to
     change some method calls that you were making to support the new
     options format (<tt>int</tt>s that you "OR" together).</li>
     <li>v1.5.1 - Fixed bug when decompressing and decoding to a
     byte[] using <tt>decode( String s, boolean gzipCompressed )</tt>.
     Added the ability to "suspend" encoding in the Output Stream so
     you can turn on and off the encoding if you need to embed base64
     data in an otherwise "normal" stream (like an XML file).</li>
     <li>v1.5 - Output stream pases on flush() command but doesn't do anything itself.
     This helps when using GZIP streams.
     Added the ability to GZip-compress objects before encoding them.</li>
     <li>v1.4 - Added helper methods to read/write files.</li>
     <li>v1.3.6 - Fixed OutputStream.flush() so that 'position' is reset.</li>
     <li>v1.3.5 - Added flag to turn on and off line breaks. Fixed bug in input stream
     where last buffer being read, if not completely full, was not returned.</li>
     <li>v1.3.4 - Fixed when "improperly padded stream" error was thrown at the wrong time.</li>
     <li>v1.3.3 - Fixed I/O streams which were totally messed up.</li>
     </ul>
     <br>
     I am placing this code in the Public Domain. Do with it as you will.
     This software comes with no guarantees or warranties but with
     plenty of well-wishing instead!
     Please visit <a href="http://iharder.net/base64">http://iharder.net/base64</a>
     periodically to check for updates or to contribute improvements.

     @author Robert Harder
     @author rob@iharder.net
     @version 2.2.1
